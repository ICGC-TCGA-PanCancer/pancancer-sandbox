---

- name: Confirm docker is installed
  sudo: True
  command: docker ps

- stat: path=/bin/orchestra
  register: orchestra_symlink

- name: Do not install on a launcher machine -- don't schedule workflows
  fail: msg="This is machine is an orchestra manager, not installing the webservice."
  when: orchestra_symlink.stat.exists == True

- name: Stop Orchestra Service (if it has already been installed)
  sudo: True
  ignore_errors: yes
  service: name=orchestra state=stopped

- name: Create Webservice Home Folder
  sudo: "{{ user_name }}"
  file: dest=/home/{{ user_name }}/orchestra mode=755 owner={{ user_name }} group={{ user_name }} state=directory

- name: Install Orchestra Service File
  sudo: True
  copy: src=../webservice/orchestra.service dest=/etc/init.d/orchestra owner=root mode=0700

- name: Install Orchestra Webservice
  sudo: "{{ user_name }}"
  copy: src=../webservice/management_interface.py dest=/home/{{ user_name }}/orchestra/management_interface.py owner={{ user_name }} mode=0700

- name: Update rc links for Orchestra service
  sudo: True
  command: chdir=/home/{{ user_name }}/orchestra update-rc.d orchestra defaults

- name: Start Orchestra Service
  sudo: True
  service: name=orchestra state=started

- name: Confirm service is up
  sudo: "{{ user_name }}"
  command: curl http://127.0.0.1:9009/healthy

- name: Append the IP address to the orchestra cache file
  local_action: shell echo "{{ ansible_eth0.ipv4.address }}" >> /home/{{ user_name }}/.orchestra_cache
  serial: 1

- name: Make the .orchestra_cache unique
  local_action: shell cat /home/{{ user_name }}/.orchestra_cache | sort --unique > /home/{{ user_name }}/.orchestra_cache_new
  serial: 1

- name: Finalize the .orchestra_cache
  local_action: shell rm /home/{{ user_name }}/.orchestra_cache && mv /home/{{ user_name }}/.orchestra_cache_new /home/{{ user_name }}/.orchestra_cache
  serial: 1




